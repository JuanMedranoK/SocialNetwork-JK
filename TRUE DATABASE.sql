Create Database TRUE
GO
USE TRUE
GO


--USUARIO

CREATE TABLE USERS(
ID_USER INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
NAME_USER VARCHAR(50)NOT NULL,
LASTNAME_USER VARCHAR(50)NOT NULL,
MAIL_USER VARCHAR(50)NOT NULL,
PASSWORD_USER VARCHAR(50)NOT NULL,
PROFILE_PICTURE_USER VARCHAR(500)NOT NULL, --route
PORTRAIT_USER VARCHAR(500)NOT NULL,--route
USERNAME VARCHAR(50) NOT NULL
)



-- PUBLICACIONES

CREATE TABLE POST(
ID_POST INT IDENTITY (1,1) PRIMARY KEY NOT NULL,
ROUTE_POST VARCHAR(500),
ID_USER_POST INT FOREIGN KEY REFERENCES USERS(ID_USER) NOT NULL,
DATE_POST DATETIME NOT NULL,
DESCRIPTION_POST VARCHAR(500)
)


--COMENTARIOS

CREATE TABLE COMMENTS(
ID_COMMENT INT IDENTITY (1,1) PRIMARY KEY NOT NULL,
ID_POST_COMMENT INT FOREIGN KEY REFERENCES POST(ID_POST) ON DELETE CASCADE NOT NULL,
ID_USER_COMMENT INT FOREIGN KEY REFERENCES USERS(ID_USER)NOT NULL,
COMMENT_TYPE BIT DEFAULT (0) NOT NULL, --0 Comentario, 1 Respuesta
ID_COMMENT_ANSWERED INT,
NAME_USER_ANSWERED VARCHAR (50),
COMMENT VARCHAR(1000)NOT NULL,
TIMEDATE VARCHAR(100) NOT NULL
)


--LIKES

CREATE TABLE LIKES(
ID_LIKE INT IDENTITY (1,1) PRIMARY KEY NOT NULL,
ID_POST_LIKE INT FOREIGN KEY REFERENCES POST(ID_POST) ON DELETE CASCADE NOT NULL,
ID_USER_LIKE INT FOREIGN KEY REFERENCES USERS(ID_USER)NOT NULL
)

--DISLIKES

CREATE TABLE DISLIKES(
ID_DISLIKE INT IDENTITY (1,1) PRIMARY KEY NOT NULL,
ID_POST_DISLIKE INT FOREIGN KEY REFERENCES POST(ID_POST) ON DELETE CASCADE NOT NULL,
ID_USER_DISLIKE INT FOREIGN KEY REFERENCES USERS(ID_USER)NOT NULL
)

--AMIGOS

CREATE TABLE FRIENDS(
ID_FRIENDSHIP INT IDENTITY (1,1) PRIMARY KEY NOT NULL,
ID_USER INT FOREIGN KEY REFERENCES USERS(ID_USER) NOT NULL,
ID_FRIEND INT FOREIGN KEY REFERENCES USERS(ID_USER) NOT NULL,
FRIENDSHIP_DATE VARCHAR(100) NOT NULL,
)

--SOLICITUDES DE AMISTAD

CREATE TABLE REQUEST(
ID_REQUEST INT IDENTITY (1,1) PRIMARY KEY NOT NULL,
ID_USER_REQUEST INT FOREIGN KEY REFERENCES USERS(ID_USER) NOT NULL,
ID_USER_REQUESTED INT FOREIGN KEY REFERENCES USERS(ID_USER) NOT NULL,
DATE_REQUEST VARCHAR(100) NOT NULL
)


--ENVENTOS

CREATE TABLE EVENT(
ID_EVENT INT IDENTITY (1,1) PRIMARY KEY NOT NULL,
ID_HOST_USER INT FOREIGN KEY REFERENCES USERS(ID_USER) NOT NULL,
NAME_EVENT VARCHAR (50) NOT NULL,
DESCRIPTION_EVENT VARCHAR (200) NOT NULL,
DATE_EVENT DATETIME NOT NULL,
--DIRECCION
ADDRESS VARCHAR(500) NOT NULL
)

--EVENTOS AMIGOS

CREATE TABLE EVENT_USER(
ID_EVENT_USER INT IDENTITY (1,1) PRIMARY KEY NOT NULL,
ID_EVENT INT FOREIGN KEY REFERENCES EVENT(ID_EVENT) ON DELETE CASCADE NOT NULL,
ID_USER INT FOREIGN KEY REFERENCES USERS(ID_USER) NOT NULL,
STATUS_EVENT_USER INT-- 0 UNCONFIRMED, 1 CONFIRMED, 2 DENIED
)

--VER PUBLICACIONES DE AMIGOS

create proc GET_POST_PRINCIPAL
@id_user int
as
SELECT * FROM (Select DISTINCT A.ID AS ID_POST, A.POST AS ROUTE, A.ID_USER, A.NAMEUSER, A.POSTDATE AS DATE, A.USERPHOTO, A.CAPTION, ISNULL(B.COUNT_LIKES,0) AS 'LIKES COUNT', ISNULL(B.COUNT_DISLIKES,0)AS 'DISLIKES COUNT', ISNULL(C.ID_LIKE, 0)AS 'MY LIKE', ISNULL(C.ID_DISLIKE, 0)AS 'MY DISLIKE' From
(SELECT P.ID_POST AS ID, P.ROUTE_POST AS POST, P.ID_USER_POST AS ID_USER,
US.NAME_USER + ' ' + US.LASTNAME_USER AS NAMEUSER,
P.DATE_POST AS POSTDATE, US.PROFILE_PICTURE_USER AS USERPHOTO, P.DESCRIPTION_POST AS CAPTION
FROM POST P 
LEFT JOIN FRIENDS U ON U.ID_FRIEND = P.ID_USER_POST
LEFT JOIN DISLIKES DL ON DL.ID_POST_DISLIKE = P.ID_POST
LEFT JOIN USERS US ON U.ID_FRIEND = US.ID_USER)A
LEFT JOIN
(SELECT P.ID_POST AS ID, COUNT(L.ID_USER_LIKE) AS COUNT_LIKES, COUNT(DL.ID_USER_DISLIKE) AS COUNT_DISLIKES FROM POST P
LEFT JOIN LIKES L ON P.ID_POST = L.ID_POST_LIKE
LEFT JOIN DISLIKES DL ON P.ID_POST = DL.ID_POST_DISLIKE
GROUP BY P.ID_POST
) B ON A.ID = B.ID
LEFT JOIN
(SELECT P.ID_POST, L.ID_LIKE, DL.ID_DISLIKE FROM POST P
left JOIN LIKES L ON P.ID_POST = L.ID_POST_LIKE
left JOIN DISLIKES DL ON P.ID_POST = DL.ID_POST_DISLIKE
WHERE L.ID_USER_LIKE = @id_user OR DL.ID_USER_DISLIKE = @id_user)C
ON A.ID = C.ID_POST) A
INNER JOIN
(SELECT ID_FRIEND AS USERFRIEND FROM FRIENDS WHERE ID_USER = @id_user) B ON A.ID_USER = B.USERFRIEND
ORDER BY(A.DATE) DESC
GO

--VER PUBLICACIONES DE USUARIO ESPECIFICO

create proc GET_POST_USER
@id_user int,
@id_user_logged int
as
Select DISTINCT A.ID AS ID_POST, A.POST AS ROUTE, A.ID_USER, A.NAMEUSER, A.POSTDATE AS DATE, A.USERPHOTO, A.CAPTION, ISNULL(B.COUNT_LIKES,0) AS 'LIKES COUNT', ISNULL(B.COUNT_DISLIKES,0)AS 'DISLIKES COUNT', ISNULL(C.ID_LIKE, 0)AS 'MY LIKE', ISNULL(C.ID_DISLIKE, 0)AS 'MY DISLIKE' From
(SELECT P.ID_POST AS ID, P.ROUTE_POST AS POST, P.ID_USER_POST AS ID_USER,
US.NAME_USER + ' ' + US.LASTNAME_USER AS NAMEUSER,
P.DATE_POST AS POSTDATE, US.PROFILE_PICTURE_USER AS USERPHOTO, P.DESCRIPTION_POST AS CAPTION
FROM POST P 
LEFT JOIN DISLIKES DL ON DL.ID_POST_DISLIKE = P.ID_POST
LEFT JOIN USERS US ON P.ID_USER_POST = US.ID_USER
WHERE P.ID_USER_POST = @id_user)A
LEFT JOIN
(SELECT P.ID_POST AS ID, COUNT(L.ID_USER_LIKE) AS COUNT_LIKES, COUNT(DL.ID_USER_DISLIKE) AS COUNT_DISLIKES FROM POST P
LEFT JOIN LIKES L ON P.ID_POST = L.ID_POST_LIKE
LEFT JOIN DISLIKES DL ON P.ID_POST = DL.ID_POST_DISLIKE
GROUP BY P.ID_POST
)B ON A.ID = B.ID
LEFT JOIN
(SELECT P.ID_POST, L.ID_LIKE, DL.ID_DISLIKE FROM POST P
LEFT JOIN LIKES L ON P.ID_POST = L.ID_POST_LIKE
LEFT JOIN DISLIKES DL ON P.ID_POST = DL.ID_POST_DISLIKE
WHERE L.ID_USER_LIKE = @id_user_logged OR DL.ID_USER_DISLIKE = @id_user_logged)C
ON A.ID = C.ID_POST
ORDER BY(A.POSTDATE) DESC
GO